package com.thealgorithms.geometry;

import java.awt.Point;
import java.util.Collection;
import java.util.List;
import java.util.stream.Stream;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

/**
 * The {@code MidpointCircleTest} class contains unit tests for the
 * {@code MidpointCircle} class, specifically testing the
 * {@code drawCircle} method.
 *
 * <p>This class uses parameterized tests to validate the output of
 * the Midpoint Circle algorithm for various input parameters.</p>
 */
class MidpointCircleTest {

    /**
     * Provides test cases for the parameterized test.
     *
     * <p>Each test case includes center coordinates, radius,
     * and the expected collection of points that should be generated by the
     * {@code drawCircle} method.</p>
     *
     * @return a stream of arguments containing test cases
     */
    static Stream<Arguments> circlePointsProvider() {
        return Stream.of(
            Arguments.of(0, 0, 1, List.of(new Point(0, 1), new Point(1, 0), new Point(0, -1), new Point(-1, 0), new Point(1, 1), new Point(-1, -1), new Point(1, -1), new Point(-1, 1))),
            Arguments.of(0, 0, 2, List.of(new Point(0, 2), new Point(2, 0), new Point(0, -2), new Point(-2, 0), new Point(2, 2), new Point(-2, -2), new Point(2, -2), new Point(-2, 2))),
            Arguments.of(1, 1, 3, List.of(new Point(1, 4), new Point(4, 1), new Point(1, -2), new Point(-2, 1), new Point(4, 4), new Point(-2, -2), new Point(4, -2), new Point(-2, 4))),
            Arguments.of(-3, -3, 4, List.of(new Point(-3, 1), new Point(1, -3), new Point(-3, -7), new Point(-7, -3), new Point(1, 1), new Point(-7, -7), new Point(1, -7), new Point(-7, 1)))
        );
    }

    /**
     * Tests the {@code drawCircle} method of the {@code MidpointCircle} class.
     *
     * <p>This parameterized test runs multiple times with different sets of
     * center coordinates and radii to validate that the generated points
     * match the expected output.</p>
     *
     * @param xc      the x-coordinate of the center point
     * @param yc      the y-coordinate of the center point
     * @param r       the radius of the circle
     * @param expected a collection of expected points that should form a circle
     */
    @ParameterizedTest
    @MethodSource("circlePointsProvider")
    void testDrawCircle(int xc, int yc, int r, Collection<Point> expected) {
        List<Point> actual = MidpointCircle.drawCircle(xc, yc, r);
        Assertions.assertEquals(expected.size(), actual.size(), "The size of the points list should match.");
        Assertions.assertTrue(expected.containsAll(actual) && actual.containsAll(expected), "The points generated should match the expected points.");
    }
}