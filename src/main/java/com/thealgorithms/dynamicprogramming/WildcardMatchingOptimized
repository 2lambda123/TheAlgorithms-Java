/**
 *
 * Author: Utkarsh Dixit

 * Problem Statement: To determine if the pattern matches the text.
 * The pattern can include two special wildcard characters:
 *       ' ? ': Matches any single character.
 *       ' * ': Matches zero or more of any character sequence.
 *
 * Use DP to return True if the pattern matches the entire text and False otherwise
 * It will optimize tha time complexity to n*m
 */

package com.thealgorithms.dynamicprogramming;

public class WildcardMatching {

    public boolean isMatch(String s, String p) {
        boolean dp[][] = new boolean[p.length()+1][s.length()+1];
        for(int i = dp.length-1; i >= 0; i--) {
            for(int j = dp[0].length-1; j >= 0; j--) {
                if(i == dp.length-1 && j == dp[0].length-1) {
                    dp[i][j] = true;
                } else if(i == dp.length-1) {
                    dp[i][j] = false;
                } else if(j == dp[0].length-1) {
                    if(p.charAt(i) == '*') {
                        dp[i][j] = dp[i+1][j];
                    } else {
                        dp[i][j] = false;
                    }
                } else {
                    if(p.charAt(i) == '?') {
                        dp[i][j] = dp[i+1][j+1];
                    } else if(p.charAt(i) == '*') {
                        dp[i][j] = dp[i+1][j] || dp[i][j+1];
                    } else if(p.charAt(i) == s.charAt(j)) {
                        dp[i][j] = dp[i+1][j+1];
                    } else {
                        dp[i][j] = false;
                    }
                }
            }
        }
        return dp[0][0];
    }
}
