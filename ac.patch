--- ./src/main/java/com/thealgorithms/bitmanipulation/ComplementOfBaseTenNumber.java	(original)
+++ ./src/main/java/com/thealgorithms/bitmanipulation/ComplementOfBaseTenNumber.java	(reformatted)
@@ -8,14 +8,14 @@
  * @author Akshit Kumar Chandora (https://github.com/axitchandora)
  */
 
-  public class ComplementOfBaseTenNumber {
+public class ComplementOfBaseTenNumber {
     public static int bitwiseComplement(int num) {
-      // count number of total bits in 'num'
+        // count number of total bits in 'num'
         int bitCount = 0;
         int n = num;
         while (n > 0) {
-          bitCount++;
-          n = n >> 1;
+            bitCount++;
+            n = n >> 1;
         }
 
         // for a number which is a complete power of '2' i.e., it can be written as
@@ -23,12 +23,12 @@
         // has 'n' least significant bits set to '1'. For example, '4' which is a
         // complete power of '2', and '3' (which is one less than 4) has a binary
         // representation of '11' i.e., it has '2' least significant bits set to '1'
-        int all_bits_set = (int)Math.pow(2, bitCount) - 1;
+        int all_bits_set = (int) Math.pow(2, bitCount) - 1;
 
         // from the solution description: complement = number ^ all_bits_set
         return num ^ all_bits_set;
     }
-  }
+}
 
 /*
  *#Time Complexity