The input array must be sorted as one of the requirements for the Exponential search.

There are two steps to exponential search.
In the first stage, a range that includes the searched element is calculated.
The element is searched in the second stage using binary search inside that range. 

The first element that satisfies both of these constraints is found by exponential search.

    Greater than the searched element
    Has index as a power of 2.

This index becomes the upper bound for the range, if such index is j then 2^(j-1) (or j/2) is the lower bound for the search.

//Code begins

package com.simranJAVA;

import java.util.Arrays;
import java.util.Scanner;

public class ExponentialSearch {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int[] arr = {5, 65, 89, 3, 1, 10, 11, 22, 34, 43};
        Arrays.sort(arr);
        System.out.println("Sorted array- " + Arrays.toString(arr));
        System.out.println("Enter value to search: ");
        int searchElement = sc.nextInt();
        int index = exponentialSearch(arr, searchElement);
        if(index != -1){
            System.out.println("Searched item " + arr[index] + " found at index "+index);
        }else{
            System.out.println("Searched item " + searchElement + " not found in the array");
        }
        sc.close();
    }

    private static int exponentialSearch(int[] arr, int searchElement){
        int bound = 1;
        // increase upper bound
        while (bound < arr.length && arr[bound] < searchElement) {
            bound *= 2;
        }
        // do binary search with in the range
        return binarySearch(arr, bound/2, Integer.min(bound + 1, arr.length), searchElement);
    }

    private static int binarySearch(int[] arr, int start, int end, int searchElement){
        // exit condition
        if(start > end){
            return -1;
        }
        int middle = (start+end)/2;
        // element found
        if(searchElement == arr[middle]){
            return middle;
        }
        // left half
        if(searchElement < arr[middle]){
            return binarySearch(arr, start, middle-1, searchElement);
        }else{
            // right half
            return binarySearch(arr, middle+1, end, searchElement);
        }
    }
}
//Code ends


The first stage of the algorithm where the range is determined takes O(log i) time, where i is the index of the searched element in the input array.

Second stage where Binary search is done also takes O(log i) for the given range. So the total time taken is 2*O(log i). Thus the time complexity of Exponential search is O(log i).

Space complexity of Exponential search is O(1), for recursive implementation of Binary search method calls are stacked for each recursive call making the space complexity as O(log i) in that case.
